create database workout;
use workout;

文字 varchar(n)
數字 int

-- 建立資料表
create table friends
(
  fid int auto_increment not null primary key,
  cname char(10) null,
  ename varchar(30) null,
  tel varchar(30) null
);


-- 修改資料表結構 - 加入新的欄位
alter table friends
  add email varchar(30) default 'someone@somewhere.com';

default：如果新增資料時給有給定欄位值，以default為預設值

-- 修改資料表結構 - 變更欄位定義
alter table friends
  modify email varchar(40);

describe friends;

alter table friends
  modify email varchar(40) default 'who@where.com';

describe friends;

-- -- 修改資料表結構 - 刪除欄位
alter table friends
  drop column email;

-- 刪除資料表
DROP TABLE friends;

----------------------------------------------
DROP TABLE t1;
CREATE TABLE t1 (
  id int AUTO_INCREMENT NOT NULL PRIMARY KEY,
  data int NULL,
  test int NULL
);
INSERT INTO t1(data) VALUES (100);

SET sql_mode = '';
DROP TABLE t1;
CREATE TABLE t1 (
  id int AUTO_INCREMENT NOT NULL PRIMARY KEY,
  data int NULL,
  test int NOT NULL
);
INSERT INTO t1(data) VALUES (100);

將sql_mode設定成traditional時，NOT NULL才會有效果
SET sql_mode = 'traditional';
DROP TABLE t1;
CREATE TABLE t1 (
  id int AUTO_INCREMENT NOT NULL PRIMARY KEY,
  data int NULL,
  test int NOT NULL
);
INSERT INTO t1(data) VALUE (100);

----------------------------------------------
如果沒有設定PRIMARY KEY時，插入了兩筆id相同的資料改怎麼做補救

Q:
  DROP TABLE t1;
  CREATE TABLE t1 (
    id int NULL,
    data int NULL,
  );

  INSERT INTO t1(id, data) VALUES (1, 100), (2, 100);
  INSERT INTO t1(id, data) VALUES (1, 100);

  SELECT * FROM t1;
  UPDATE t1 SET id = 3 WHERE id = 1 and data = 100;
  DELETE FROM t1 WHERE id = 1 and data = 100;

A:
  DROP TABLE t1;
  CREATE TABLE t1 (
    id int NULL,
    data int NULL,
  );

  INSERT INTO t1(id, data) VALUES (1, 100), (2, 100);
  INSERT INTO t1(id, data) VALUES (1, 100);

  SELECT * FROM t1;

  ALTER TABLE t1 ADD tempId int AUTO_INCREMENT PRIMARY KEY;

  SELECT * FROM t1;

  UPDATE t1 SET id = 3 WHERE tempId = 3;

----------------------------------------------
DROP TABLE t1;
CREATE TABLE t1 (
  id int not NULL PRIMARY KEY,
  data int NULL,
);

DROP TABLE t1;
CREATE TABLE t1 (
  id int not NULL,
  data int NULL,
  PRIMARY KEY (id)
);

----------------------------------------------
DROP TABLE t1;
CREATE TABLE t1(
  id int PRIMARY KEY,
  data int
);

ALTER TABLE t1 ADD CONSTRAINT chk_data check (data >= 0);

INSERT INTO t1(id, data) VALUES (1, 100);
INSERT INTO t1(id, data) VALUES (1, 200); => ERROR 1062 (23000): Duplicate entry '1' for key 'PRIMARY'
INSERT INTO t1(id, data) VALUES (2, -1);

SELECT * FROM t1;

----------------------------------------------
USE DB0805;

DROP TABLE customers;
CREATE TABLE customers (
  customerID int PRIMARY KEY,
  companyName varchar(20)
);

DROP TABLE orders;
CREATE TABLE orders (
  orderID int PRIMARY KEY,
  customerID int
);

ALTER TABLE orders
ADD CONSTRAINT fk_customers_orders  FOREIGN KEY (customerID) REFERENCES customers(customerID)
ON UPDATE CASCADE
ON DELETE CASCADE;

INSERT INTO customers VALUES (1, 'AAA'), (2, 'BBB'), (3, 'CCC');
SELECT * FROM customers;

INSERT INTO orders VALUES (1, 1), (2, 1), (3, 2);
SELECT * FROM orders;

無法新增
INSERT INTO orders VALUES (4, 99);
=> ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`db0805`.`orders`, CONSTRAINT `fk_customer_order` FOREIGN KEY (`customerID`) REFERENCES `customers` (`customerID`) ON DELETE CASCADE ON UPDATE CASCADE)

更新customers的customerID時，orders中的customerID也會跟著修改
UPDATE customers SET customerID = 77 WHERE customerID = 1;

刪除customerID為77的資料時，
DELETE FROM customers WHERE customerID = 77;

----------------------------------------------
ALTER TABLE customers
ADD CONSTRAINT unique_companyName UNIQUE (companyName);
INSERT INTO customers VALUES (1, 'BBB'); => ERROR 1062 (23000): Duplicate entry 'BBB' for key 'customers'
ALTER TABLE customers
DROP CONSTRAINT unique_companyName;

ALTER TABLE `customers` DROP INDEX `customers`; => 5.7.26處理方法

CREATE UNIQUE INDEX idx_companyName ON customers (companyName);
INSERT INTO customers VALUES (1, 'BBB'); => ERROR 1062 (23000): Duplicate entry 'BBB' for key 'customers'
DROP INDEX idx_companyName ON customers;

----------------------------------------------