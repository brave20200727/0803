UML
itread01.com/content/1541223966.html
http://tx.liberal.ntu.edu.tw/InfoMgt/Jx/IS_IM/UML.htm

Process Model
    - Envision
    - Conceptual Design
        research => analysis => optimization
    - Logical Design
        analysis => optimization
    - Physical Design
        rationalzation => implementation

Source of Information
    - Artifact
    - Systems
    - People

Technique for Gathering Information
    - Shadowing: Directly observe individuals doing their job to discover current practice and problem
    - Interviews: Gather specific Information from individuals
    - Focus group: Query a group to discover attitudes and shared perception
    - Surveys: Collect detailed and statistically significant data
    - User instruction: Ask end users to teach you how they work with a system
    - Prototyping: Simulate a system that would be impractial to test directly
    - Instrumented version: Use an instrument application to record how users perform tasks

Categories of Information
    - Business
    - Application
    - Operations
    - Technology

如何區分實體跟屬性
    - 大小：比如說車子會有顏色 型號 廠牌，車子就是主體，顏色 型號 廠牌就是客體
    - 主體性：我們會說客戶有客戶的地址，不會說地址有地址的客戶，客戶就是實體，地址就是屬性
    - 互動性：例如客戶之間會互相互動，不會有地址跟血型互動，客戶就是實體，地址與血型就是屬性

/*
prod                    supp
pid     sid             sid         pid
p1      s1              s1          p1
p2                      s2          p1
p3      s1              s3
p1      s2(?)           s1          p3(?)

                |
                V

                prod_supp
                psid        pid         sid         price       minQty
                1           p1          s1          100         1
                2           p1          s2          80          10000
                3           p3          s1
                4
                5
                6
*/

1.
Timesheet(多) => Invoice(一)
+InvoiceID       -TimesheetID
2.
Employee(多) => Vehicle(多)
                -EmployeeID
            |
            V
Employee_Vehicle
+EVID
+EmployeeID
+VehicleID
3.
Employee(多) => EmployeeType(ㄧ)
-Salary         +Salary         (簡易版本，因為實際要更複雜)
4.
Timesheet(多) => Client(一)

----------------------------------------------

SHOW VARIABLES LIKE 'data%';
=>
+---------------+--------------------------------+
| Variable_name | Value                          |
+---------------+--------------------------------+
| datadir       | /Applications/MAMP/db/mysql57/ |
+---------------+--------------------------------+
能夠查詢到mySQL database儲存資料的路徑

SHOW DATABASES; => 顯示出所有的database

SHOW VARIABLES LIKE 'char%'
SET NAMES BIG5;

如果直接更改資料表的內容是有關使用者權限的東西，
想要立即生效的話就需要下這個指令
FLUSH PRIVILEGES;

----------------------------------------------
prod

        pid ....... qty
        1           100
甲                             乙
100<----------------
-20
80----------------->80
                      -------->80 (dirty read)
-10
70----------------->70#

----------------------------------------------

        pid ....... qty
        1           100
甲                             乙             丙              丁
100<----------------
                    80<--------
80<-----------------
                    60<----------------------
60<-----------------
                    50<--------------------------------------
50<-----------------

lock 類型
    - read lock
    - write lock

LOCK TABLE products READ;
UNLOCK TABLES;
LOCK TABLE products WRITE;
UNLOCK TABLES;
-- LOCK TABLE products LOW PRIORITY READ;
*如果同在queue中要lock的使用者們，優先程度write lock會優於read lock

列出所有連線中的使用者
SHOW PROCESSLIST;

LOCK IN SHARE MODE; => read lock
FOR UPDATE; => write lock
REPEATABLE READ;

- Atomicity（原子性）：一個事務（transaction）中的所有操作，或者全部完成，或者全部不完成，不會結束在中間某個環節。事務在執行過程中發生錯誤，會被回滾（Rollback）到事務開始前的狀態，就像這個事務從來沒有執行過一樣。即，事務不可分割、不可約簡。
- Consistency（一致性）：在事務開始之前和事務結束以後，資料庫的完整性沒有被破壞。這表示寫入的資料必須完全符合所有的預設約束、觸發器、級聯回滾等。
- Isolation（隔離性）：資料庫允許多個並發事務同時對其數據進行讀寫和修改的能力，隔離性可以防止多個事務並發執行時由於交叉執行而導致數據的不一致。事務隔離分為不同級別，包括未提交讀（Read uncommitted）、提交讀（read committed）、可重複讀（repeatable read）和串行化（Serializable）。[1]
- Durability（持久性）：事務處理結束後，對數據的修改就是永久的，即便系統故障也不會丟失。

mysqldump -uroot 資料庫名稱